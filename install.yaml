esp32:  
  board: esp32dev  # Spécifie le modèle de la carte ESP32 (ESP32 DevKit V1 ici).
  framework:
    type: arduino  # Utilisation du framework Arduino, largement compatible avec ESPHome.

# Section commentée permettant l'importation d'une configuration complète depuis ESPHome.

packages:  # Inclusion d'une configuration externe pour modularité et réutilisation.
  twinsen68.pompe_doseuses_esphome:  # Nom du package inclus.
    url: https://github.com/Twinsen68/pompe_doseuses_esphome  # Lien vers le dépôt GitHub contenant la configuration de l’enceinte.
    file: pompe_doseuses_esphome.yaml  # Fichier YAML spécifique inclus depuis le dépôt GitHub.
    ref: v1.0.0  # Version spécifique du fichier à utiliser.

esphome:  # Configuration générale d'ESPHome pour cet appareil.
  name: pompe_doseuses_esphome  # Nom de l'appareil défini dynamiquement via la variable "name".
  name_add_mac_suffix: false  # Empêche l'ajout d'un suffixe MAC au nom pour éviter les doublons sur le réseau.
  friendly_name: "Pompes doseuses récifale"  # Nom convivial affiché dans Home Assistant.

api:  # Active l’API ESPHome pour la communication avec Home Assistant.
  encryption:
    key: tsHqLo48mLGhWo/qQQrZUFdsEwuZcC1/BlUOXWExy14=  # Clé de chiffrement pour sécuriser les échanges.

wifi:  # Configuration du réseau Wi-Fi pour connecter l’ESP32.
  ssid: !secret wifi_ssid
  password: !secret wifi_password

globals:  # Déclaration des variables globales pour la configuration
  - id: pump1_dose_ml
    type: float
    restore_value: true
    initial_value: '0.0'
  # Mode 3 - Période personnalisée - Période 3
  - id: pump1_period3_start_hour
    type: int
    restore_value: true
    initial_value: '18'
  - id: pump1_period3_start_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period3_end_hour
    type: int
    restore_value: true
    initial_value: '19'
  - id: pump1_period3_end_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period3_doses
    type: int
    restore_value: true
    initial_value: '1'

  # Mode 3 - Période personnalisée - Période 4
  - id: pump1_period4_start_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period4_start_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period4_end_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period4_end_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period4_doses
    type: int
    restore_value: true
    initial_value: '0'

  # Mode 3 - Période personnalisée - Période 5
  - id: pump1_period5_start_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period5_start_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period5_end_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period5_end_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period5_doses
    type: int
    restore_value: true
    initial_value: '0'

  # Mode 3 - Période personnalisée - Période 6
  - id: pump1_period6_start_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period6_start_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period6_end_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period6_end_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_period6_doses
    type: int
    restore_value: true
    initial_value: '0'

  # Mode 4 - Minuteur : doses programmées individuellement pour dose 3 à 12
  - id: pump1_minute_dose_3_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_3_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_3_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_4_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_4_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_4_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_5_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_5_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_5_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_6_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_6_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_6_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_7_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_7_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_7_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_8_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_8_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_8_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_9_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_9_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_9_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_10_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_10_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_10_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_11_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_11_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_11_quantity
    type: float
    restore_value: true
    initial_value: '0.0'
  - id: pump1_minute_dose_12_hour
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_12_minute
    type: int
    restore_value: true
    initial_value: '0'
  - id: pump1_minute_dose_12_quantity
    type: float
    restore_value: true
    initial_value: '0.0'

automations:  # Section pour les automatisations
  - id: pump1_schedule
    trigger:
      platform: time
      at: "00:00:00"  # Déclenchement quotidien
    action:
      - lambda: |-
          int mode = id(pump1_mode);
          int current_hour = id(current_time_hour);
          int current_minute = id(current_time_minute);
          if (mode == 3) {
            // Logique pour le mode 3
          } else if (mode == 4) {
            // Mode 4 - Minuteur : doses programmées individuellement
            // Mise à jour de la quantité quotidienne en fonction de la somme des doses programmées
            float total = id(pump1_minute_dose_1_quantity) + id(pump1_minute_dose_2_quantity)
              + id(pump1_minute_dose_3_quantity) + id(pump1_minute_dose_4_quantity)
              + id(pump1_minute_dose_5_quantity) + id(pump1_minute_dose_6_quantity)
              + id(pump1_minute_dose_7_quantity) + id(pump1_minute_dose_8_quantity)
              + id(pump1_minute_dose_9_quantity) + id(pump1_minute_dose_10_quantity)
              + id(pump1_minute_dose_11_quantity) + id(pump1_minute_dose_12_quantity);
            id(pump1_daily_quantity) = total;
            
            if (current_hour == id(pump1_minute_dose_1_hour) && current_minute == id(pump1_minute_dose_1_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_1_quantity);
              ESP_LOGD("pump", "Minuteur dose 1 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_2_hour) && current_minute == id(pump1_minute_dose_2_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_2_quantity);
              ESP_LOGD("pump", "Minuteur dose 2 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_3_hour) && current_minute == id(pump1_minute_dose_3_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_3_quantity);
              ESP_LOGD("pump", "Minuteur dose 3 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_4_hour) && current_minute == id(pump1_minute_dose_4_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_4_quantity);
              ESP_LOGD("pump", "Minuteur dose 4 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_5_hour) && current_minute == id(pump1_minute_dose_5_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_5_quantity);
              ESP_LOGD("pump", "Minuteur dose 5 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_6_hour) && current_minute == id(pump1_minute_dose_6_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_6_quantity);
              ESP_LOGD("pump", "Minuteur dose 6 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_7_hour) && current_minute == id(pump1_minute_dose_7_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_7_quantity);
              ESP_LOGD("pump", "Minuteur dose 7 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_8_hour) && current_minute == id(pump1_minute_dose_8_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_8_quantity);
              ESP_LOGD("pump", "Minuteur dose 8 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_9_hour) && current_minute == id(pump1_minute_dose_9_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_9_quantity);
              ESP_LOGD("pump", "Minuteur dose 9 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_10_hour) && current_minute == id(pump1_minute_dose_10_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_10_quantity);
              ESP_LOGD("pump", "Minuteur dose 10 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_11_hour) && current_minute == id(pump1_minute_dose_11_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_11_quantity);
              ESP_LOGD("pump", "Minuteur dose 11 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
            if (current_hour == id(pump1_minute_dose_12_hour) && current_minute == id(pump1_minute_dose_12_minute)) {
              id(pump1_dose_ml) = id(pump1_minute_dose_12_quantity);
              ESP_LOGD("pump", "Minuteur dose 12 déclenchée: %.2f ml", id(pump1_dose_ml));
              id(run_pump1_steps).execute();
            }
          }